# Set to the number of CPU cores (or "auto")
worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
}

http {
  # https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-http/#https-server-optimization
  ssl_session_cache   shared:SSL:10m;
  ssl_session_timeout 10m;

  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response
    # Set DNS:Port for app server here
    server web_app:5000 fail_timeout=0;
  }

  # Default host match
  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    return 444;
  }

  # HTTP host match
  server {
    listen 80 deferred;
    listen [::]:80 deferred;
    server_name localhost;
    # Redirect all non-https requests
    rewrite ^ https://$host$request_uri? permanent;
  }

  # HTTPS host match
  server {
    listen 443 ssl http2 deferred;
    listen [::]:443 ssl http2 deferred;

    # DNS name match
    server_name localhost;

    include snippets/self-signed.conf;
    include snippets/ssl-params.conf;

    client_max_body_size 4G;

    # how long a client's sessions should be kept open (in seconds)
    keepalive_timeout 5s;

    # path for static files
    #root /path/to/app/current/public;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }


    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /path/to/app/current/public;
    }
  }

}
